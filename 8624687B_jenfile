pipeline {
    agent any

    stages {
        stage('Backup UAT Web Server') {
            steps {
                echo 'Backing up UAT Web Server...'
                script {
                    def result = sh(script: 'docker commit 8624687b_uatsvr uat_backup:latest', returnStatus: true)
                    if (result != 0) {
                        error "Error: Failed to create a backup image for UAT Web Server."
                    }
                }
                echo "Backup completed."
            }
        }

        stage('Verify UAT Web Server') {
            steps {
                echo 'Verifying UAT Web Server...'
                script {
                    def status = sh(script: 'curl -s --head http://localhost:32500 | grep "200 OK"', returnStatus: true)
                    if (status != 0) {
                        error "Error: UAT Web Server is not running."
                    }
                }
                echo "UAT Web Server is running."
            }
        }

        stage('Performing Stress Test') {
            steps {
                echo 'Running stress test on UAT web server...'
                sh 'sleep 3'
                echo "Stress test completed."
            }
        }

        stage('Stress Test Result') {
            steps {
                echo "Stress test result is good."
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    def userInput = input message: 'Proceed to update production web server?', parameters: [booleanParam(defaultValue: false, description: 'Confirm deployment', name: 'confirm')]
                    if (!userInput) {
                        error "Aborting deployment."
                    }
                }
                echo "Updating production server..."
                script {
                    def result = sh(script: 'docker commit 8624687b_prodsvr prod_backup:latest', returnStatus: true)
                    if (result != 0) {
                        error "Error: Failed to create a backup image for Production Web Server."
                    }
                }
                echo "Production update completed."
            }
        }

        stage('Verify Production Server') {
            steps {
                echo 'Verifying Production Web Server...'
                script {
                    def status = sh(script: 'curl -s --head http://localhost:32600 | grep "200 OK"', returnStatus: true)
                    if (status != 0) {
                        error "Error: Production Web Server is not running."
                    }
                }
                echo "Production Web Server is running."
            }
        }

        stage('Final Verification') {
            steps {
                echo "Production website is operational."
            }
        }
    }
}
